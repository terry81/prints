<?php

/**
 * This is the model base class for the table "scanhistory".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Scanhistory".
 *
 * Columns in table "scanhistory" available as properties of the model,
 * followed by relations of table "scanhistory" available as properties of the model.
 *
 * @property integer $sh_id
 * @property string $database
 * @property integer $iterations_number
 * @property integer $hitlist_length
 * @property string $scanning_method
 * @property integer $fingerprint_id
 *
 * @property Fingerprint $fingerprint
 */
abstract class BaseScanhistory extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'scanhistory';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Scanhistory|Scanhistories', $n);
	}

	public static function representingColumn() {
		return 'database';
	}

	public function rules() {
		return array(
			array('iterations_number, hitlist_length, fingerprint_id', 'numerical', 'integerOnly'=>true),
			array('database', 'length', 'max'=>30),
			array('scanning_method', 'length', 'max'=>15),
			array('database, iterations_number, hitlist_length, scanning_method, fingerprint_id', 'default', 'setOnEmpty' => true, 'value' => null),
			array('sh_id, database, iterations_number, hitlist_length, scanning_method, fingerprint_id', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'fingerprint' => array(self::BELONGS_TO, 'Fingerprint', 'fingerprint_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'sh_id' => Yii::t('app', 'Sh'),
			'database' => Yii::t('app', 'Database'),
			'iterations_number' => Yii::t('app', 'Iterations Number'),
			'hitlist_length' => Yii::t('app', 'Hitlist Length'),
			'scanning_method' => Yii::t('app', 'Scanning Method'),
			'fingerprint_id' => null,
			'fingerprint' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('sh_id', $this->sh_id);
		$criteria->compare('database', $this->database, true);
		$criteria->compare('iterations_number', $this->iterations_number);
		$criteria->compare('hitlist_length', $this->hitlist_length);
		$criteria->compare('scanning_method', $this->scanning_method, true);
		$criteria->compare('fingerprint_id', $this->fingerprint_id);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}