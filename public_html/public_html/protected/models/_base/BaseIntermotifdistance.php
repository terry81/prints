<?php

/**
 * This is the model base class for the table "intermotifdistance".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Intermotifdistance".
 *
 * Columns in table "intermotifdistance" available as properties of the model,
 * followed by relations of table "intermotifdistance" available as properties of the model.
 *
 * @property integer $imd_id
 * @property integer $motif_id
 * @property string $region
 * @property integer $min
 * @property string $max
 *
 * @property Motif $motif
 */
abstract class BaseIntermotifdistance extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'intermotifdistance';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Intermotifdistance|Intermotifdistances', $n);
	}

	public static function representingColumn() {
		return 'region';
	}

	public function rules() {
		return array(
			array('motif_id, min', 'numerical', 'integerOnly'=>true),
			array('region, max', 'length', 'max'=>10),
			array('motif_id, region, min, max', 'default', 'setOnEmpty' => true, 'value' => null),
			array('imd_id, motif_id, region, min, max', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'motif' => array(self::BELONGS_TO, 'Motif', 'motif_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'imd_id' => Yii::t('app', 'Imd'),
			'motif_id' => null,
			'region' => Yii::t('app', 'Region'),
			'min' => Yii::t('app', 'Min'),
			'max' => Yii::t('app', 'Max'),
			'motif' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('imd_id', $this->imd_id);
		$criteria->compare('motif_id', $this->motif_id);
		$criteria->compare('region', $this->region, true);
		$criteria->compare('min', $this->min);
		$criteria->compare('max', $this->max, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}