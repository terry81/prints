<?php

/**
 * This is the model base class for the table "protein".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Protein".
 *
 * Columns in table "protein" available as properties of the model,
 * followed by relations of table "protein" available as properties of the model.
 *
 * @property integer $id
 * @property integer $fingerprint_id
 * @property string $code
 * @property string $description
 *
 * @property Truepartialpositives[] $truepartialpositives
 * @property Truepositives[] $truepositives
 * @property Fingerprint $fingerprint
 */
abstract class BaseProtein extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'protein';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Protein|Proteins', $n);
	}

	public static function representingColumn() {
		return 'code';
	}

	public function rules() {
		return array(
			array('fingerprint_id', 'numerical', 'integerOnly'=>true),
			array('code', 'length', 'max'=>20),
			array('description', 'length', 'max'=>2000),
			array('fingerprint_id, code, description', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, fingerprint_id, code, description', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
			'truepartialpositives' => array(self::HAS_MANY, 'Truepartialpositives', 'protein_id'),
			'truepositives' => array(self::HAS_MANY, 'Truepositives', 'protein_id'),
			'fingerprint' => array(self::BELONGS_TO, 'Fingerprint', 'fingerprint_id'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'fingerprint_id' => null,
			'code' => Yii::t('app', 'Code'),
			'description' => Yii::t('app', 'Description'),
			'truepartialpositives' => null,
			'truepositives' => null,
			'fingerprint' => null,
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('fingerprint_id', $this->fingerprint_id);
		$criteria->compare('code', $this->code, true);
		$criteria->compare('description', $this->description, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}